-- postman test scripts

-- REFERENCES
https://learning.postman.com/docs/getting-started/introduction/
https://learning.postman.com/docs/writing-scripts/intro-to-scripts/
https://learning.postman.com/docs/writing-scripts/script-references/test-examples/
https://learning.postman.com/docs/writing-scripts/script-references/variables-list/

-- variables
pm.variables.has(variableName:String):function → Boolean
pm.globals.set("variable_key", "variable_value");
pm.collectionVariables.set("variable_key", "variable_value");
pm.environment.set("variable_key", "variable_value");
pm.environment.unset("variable_key");
pm.variables.set("variable_key", "variable_value");
pm.variables.unset("variable_key");

pm.variables.get("variable_key");
console.log(pm.variables.get("variable_key"));

const variable = pm.variables.get("variable_key");
var variable = '';

-- dynamic variables
{$guid}} : A v4-style GUID
{{$timestamp}}: The current Unix timestamp in seconds
{{$randomInt}}: A random integer between 0 and 1000
$randomIP, $randomIPV6
$randomPassword
$randomFirstName,$randomLastName, $randomFullName
$randomJobArea, $randomJobDescriptor, $randomJobTitle,$randomJobType
$randomDateFuture, $randomDatePast, $randomDateRecent
$randomLoremSentences




{{variable_key}} --  no body json





pm.test("Status code is 200", function () {
  pm.response.to.have.status(200);
});

pm.test("Status code is 200", () => {
  pm.expect(pm.response.code).to.eql(200);
});


pm.test("The response has all properties", () => {
    //parse the response JSON and test three properties
    const responseJson = pm.response.json();
    pm.expect(responseJson.type).to.eql('vip');
    pm.expect(responseJson.name).to.be.a('string');
    pm.expect(responseJson.id).to.have.lengthOf(1);
});

--PARSE JSON BODY
const responseJson = pm.response.json();

-- PARSE RESPONSE
var jsonData = JSON.parse(responseBody);
tests["Status code is 200"] = pm.response.to.have.status(200);
tests["check response object access token"] = jsonData.hasOwnProperty("access_token")
pm.globals.set("appPreventionUserToken", jsonData.access_token);

var jsonData = JSON.parse(responseBody);
pm.collectionVariables.set("token", jsonData.AccessToken);




--PARSE XML BODY
const responseJson = xml2Json(pm.response.text());

-- PARSE CSV
const parse = require('csv-parse/lib/sync');
const responseJson = parse(pm.response.text());


--external library
require(moduleName:String):function → *