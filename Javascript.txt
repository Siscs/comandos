JAVASCRIPT

------------------------
¤ DATAS
------------------------
new Date(ano, mês, dia, hora, minuto, segundo, milissegundo);
let data = new Date(2021,11,30);
let dataHora = new Date(2021,11,30,10,30,15);

hoje = new Date('2021-11-30T10:30:00') // 2021-11-30T13:30:00.000Z
hoje = new Date('2021-11-30T10:30:00Z') // 2021-11-30T10:30:00.000Z
let hoje = new Date('2021-11-30') // 2021-11-30T00:00:00.000Z
hoje.toISOString().slice(0,16) // '2021-12-01T00:00'

--addDays
hoje.setDate(hoje.getDate() + 1) // 2021-12-01T00:00:00.000Z

hoje.toLocaleString() // '01/12/2021 09:57:49'
hoje.toLocaleDateString() // '01/12/2021'
hoje.toLocaleTimeString() // '09:57:49'
hoje.toISOString() // '2021-12-09T12:57:49.051Z'
hoje.toISOString().slice(0,10) // '2021-12-09'
hoje.toJSON() // '2021-12-09T12:57:49.051Z'


hoje.getTime() // 1639054669051
hoje.valueOf() // 1639054669051


-- date / conversao
Date.now() // 1635638400000
Date.parse('2021-10-31') // 1635638400000
let datax = new Date();
datax.setTime(1635638400000)
datax.setTime(Date.parse('2021-10-31'))

-- remove time
let data = new Date();
data.setUTCHours(0,0,0,0) // 2021-12-08T00:00:00.000Z


-- Gets
let data = new Date(2021,11,30);
data.getDate() // 30
data.getDay() // dia da semana 0 - domingo
data.getgetFullYear() // 2021
data.getHours() // hora
data.getMinutes() // minutos
dateObj.getUTCDate() // retorna dia do mês 1 e 31



-- Sets
let data = new Date(2021,11,30);
data.setYear(98)
data.setDate(30) // seta o dia
data2.setUTCHours(0,0,0,0) // 2021-12-08T00:00:00.000Z



-- tempo decorrido
var inicio = Date.now();
fazeralgo();
var fim = Date.now();
var decorrido = fim - inicio; // tempo decorrido em milisegundos

var inicio = Date();
fazeralgo();
var fim = Date();
var decorrido = fim.getTime() - inicio.getTime(); // tempo decorrido em milisegundos







-- funcoes
validateRangeDate(start_date: string, end_date: string): boolean {
    if (start_date === "" || end_date === "") return true;

    const startDateTimeStamp = new Date(start_date).getTime();
    const endDateTimeStamp = new Date(end_date).getTime();

    return startDateTimeStamp <= endDateTimeStamp;
}

validateRangeIni(start_date: string, end_date: string) {
    if (start_date === "" || end_date === "") return true;

    const currentDateTimeStamp = Date.now();
    const startDateTimeStamp = new Date(start_date).getTime();
    //const endDateTimeStamp = new Date(end_date).getTime();
  
    if(startDateTimeStamp > currentDateTimeStamp)
      return true;

    return false;
}

------------------------
¤ NUMEROS
------------------------


calculateFactor(value: any) {

    let regex  = /^\d+(?:\.\d{1,4})?$/;
    this.convertedValue = "0";

    if(regex.test(value) && !isNaN(value)) {
      this.convertedValue = (1 / parseFloat(value)).toLocaleString();
    }

    return this.convertedValue;
}



------------------------
¤ KEYCODE FILTROS
------------------------

numberOnly(event): boolean {
	const charCode = (event.which) ? event.which : event.keyCode;
	if (charCode > 31 && (charCode < 48 || charCode > 57)) {
		return false;
	}
	return true;
}

numberDecimalOnly(event): boolean {
	const charCode = (event.which) ? event.which : event.keyCode;

	if (charCode == 46) {
	  return true;
	}

	if (charCode > 31 && (charCode < 48 || charCode > 57)) {
	  return false;
	}

	return true;
}


------------------------
¤ FORM VALIDATION
------------------------

formDateValidation(dateMin: string, dateMax: string){
	return (group: FormGroup): {[key: string]: any} => {
	  let f = group.controls[dateMin];
	  let t = group.controls[dateMax];
	  if (f.value > t.value) {
		return {
		  invalidDates: "Período invalido."
		};
	  }
	  return {};
	}
}

// FORM BUILDER
this.formConfiguration = this.formBuilder.group({
  id: this.formBuilder.control(''),
  name: this.formBuilder.control('', [
	Validators.required,
	Validators.minLength(5),
	Validators.maxLength(150)
  ]),
  partner_id: this.formBuilder.control('', [
	Validators.required,
	Validators.min(1)
  ]),
  offer_id: this.formBuilder.control('', [
	Validators.min(1)
  ]),
  min_date: this.formBuilder.control('', [
	Validators.required
  ]),
  max_date: this.formBuilder.control('', [
	Validators.required,
  ]),
  conversion_factor: this.formBuilder.control('', [
	Validators.required,
	Validators.min(0.0001),
	Validators.pattern(/^\d+(?:\.\d{1,4})?$/)
  ]),

}, { validator: this.formDateValidation('min_date', 'max_date')} );
