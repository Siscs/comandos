
install-package MediatR
install-package MediatR.Extensions.Microsoft.DependencyInjection

#startup
services.AddMediatR(typeof(Startup));

#quando estiver em assembly diferente
// services.AddScoped<IRequestHandler<AdicionarPessoaCommand,string>, PessoaCommandHandler>();
// services.AddScoped<IRequestHandler<AlterarPessoaCommand,string>, PessoaCommandHandler>();
// services.AddScoped<IRequestHandler<ExcluirPessoaCommand,string>, PessoaCommandHandler>();

// services.AddScoped<INotificationHandler<PessoaAdicionadaNotification>, PessoaNotificationHandler>();
// services.AddScoped<INotificationHandler<PessoaAlteradaNotification>, PessoaNotificationHandler>();
// services.AddScoped<INotificationHandler<PessoaExcluidaNotification>, PessoaNotificationHandler>();



#command
public class AdicionarPessoaCommand : IRequest<string>
{
	public string Nome { get; set; }
	public int Idade { get; set; }
	public char Sexo { get; set; }
}

#commandhandler
public class PessoaCommandHandler : IRequestHandler<AdicionarPessoaCommand, string>
{
	private readonly IMediator _mediator;
	private readonly IRepository<Pessoa> _repository;

	public PessoaCommandHandler(IMediator mediator, 
								IRepository<Pessoa> repository)
	{
		_mediator = mediator;
		_repository = repository;
	}

	public async Task<string> Handle(AdicionarPessoaCommand command, CancellationToken cancellationToken)
	{
		//validar commando
		// if (command.Valido())

		var pessoa = new Pessoa(null, command.Nome, command.Idade, command.Sexo);

		// validar regras negocios
		// ex se pessoa j√° existe

		// persiste no repository

		await _repository.Add(pessoa);

		//gera notificacao
		await _mediator.Publish(new PessoaAdicionadaNotification { Id = pessoa.Id,  Nome = pessoa.Nome} );

		return "Pessoa adicionada com sucesso.";
	}
}

#controller
[ApiController]
[Route("[controller]")]
public class PessoaController : ControllerBase
{
	private readonly IMediator _mediator;
	private readonly IRepository<Pessoa> _repository;

	public PessoaController(IMediator mediator, IRepository<Pessoa> repository)
	{
		_mediator = mediator;
		_repository = repository;
	}

	[HttpGet]
	public async Task<IActionResult> Get()
	{
		return Ok(await _repository.GetAll());
	}

	[HttpPost]
	public async Task<IActionResult> Post(AdicionarPessoaCommand command)
	{
		var response = await _mediator.Send(command);
		return Ok(response);
	}

	[HttpPut]
	public async Task<IActionResult> Put(AlterarPessoaCommand command)
	{
		var response = await _mediator.Send(command);
		return Ok(response);
	}

	[HttpDelete("{id}")]
	public async Task<IActionResult> Delete(Guid id)
	{
		var obj = new ExcluirPessoaCommand { Id = id };
		var result = await _mediator.Send(obj);
		return Ok(result);
	}

}

#notification
public class PessoaAdicionadaNotification : INotification
{
	public Guid Id { get; set; }
	public string Nome { get; set; }
	public int Idade { get; set; }
	public char Sexo { get; set; }
}

#notificationHandler
public class PessoaNotificationHandler : INotificationHandler<PessoaAdicionadaNotification>,
                                             INotificationHandler<PessoaAlteradaNotification>,
                                             INotificationHandler<PessoaExcluidaNotification>
{
	private readonly ILogger<PessoaNotificationHandler> _logger;
	public PessoaNotificationHandler(ILogger<PessoaNotificationHandler> logger)
	{
		_logger = logger;
	}

	public Task Handle(PessoaAdicionadaNotification notification, CancellationToken cancellationToken)
	{
		return Task.Run(() => {
			_logger.LogInformation($"PESSOA INCLUIDA: {notification.Id}-{notification.Nome}");
		});
	}

	public Task Handle(PessoaAlteradaNotification notification, CancellationToken cancellationToken)
	{
		return Task.Run(() => {
			_logger.LogInformation($"PESSOA ALTERADA: {notification.Id}-{notification.Nome}");
		});
	}

	public Task Handle(PessoaExcluidaNotification notification, CancellationToken cancellationToken)
	{
		return Task.Run(() => {
			_logger.LogInformation($"PESSOA EXCLUIDA: {notification.Id}");
		});
	}
}




https://www.treinaweb.com.br/blog/mediator-pattern-com-mediatr-no-asp-net-core